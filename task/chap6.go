package task

import (
	"math"
	"errors"
	"fmt"
)

/****************************************************************************
* 功能描述: 练习6.1,P143
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明: 下面第一个是未命名参数，第二个是命名参数

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 19:21:27          0.00           cxh                创建
*
*****************************************************************************/
func SumProductDiff(x, y int32) (int32, int32, int32) {
	return x + y, x * y, x - y
}

func SumProductDiffN(x, y int32) (sum, multi, diff int32) {
	sum, multi, diff = x+y, x*y, x-y //并行赋值
	return                           //命名参数可以显式指定，也可以不指定
}

/****************************************************************************
* 功能描述: 练习6.2,P143
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明:

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 19:28:30          0.00           cxh                创建
*
*****************************************************************************/
func MySqrt(x float64) (float64, error) {
	if x < 0 {
		return math.NaN(), errors.New("negative number")
	} else {
		return math.Sqrt(x), nil
	}
}

func MySqrt2(x float64) (ret float64, err error) {
	if x < 0 {
		ret, err = math.NaN(), errors.New("negative number")
	} else {
		ret = math.Sqrt(x)
	}
	return
}

/****************************************************************************
* 功能描述:练习6.3，147
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明:

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 19:44:29          0.00           cxh                创建
*
*****************************************************************************/
func MultiParame(data ...int) {
	for _, value := range data {
		fmt.Println(value)
	}
}

/****************************************************************************
* 功能描述:练习6.4,P156
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明:

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 20:33:24          0.00           cxh                创建
*
*****************************************************************************/
func Fabonacci(n int) (val, pos int) {
	if n <= 1 {
		val = 1
	} else {
		val1, _ := Fabonacci(n - 1)
		val2, _ := Fabonacci(n - 2)
		val = val1 + val2
	}
	pos = n
	return
}

/****************************************************************************
* 功能描述:练习6.5,P156
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明:

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 20:40:27          0.00           cxh                创建
*
*****************************************************************************/
func PrintNTo1(n int) {
	if n > 0 {
		fmt.Println(n)
		PrintNTo1(n - 1)
	}
}

func Print1ToN(n int) {
	if n > 0 {
		defer fmt.Println(n)
		Print1ToN(n - 1)
	}
}

/****************************************************************************
* 功能描述:练习6.6,P156
* 输入参数:
* 输出参数:
* 返 回 值:
* 其他说明:

* 修改日期                      版本号          修改人            修改内容
* ---------------------------------------------------------------------------
*  2017-12-14 20:48:16          0.00           cxh                创建
*
*****************************************************************************/
func Factorial(n uint64) (ret uint64) {
	if n == 0 {
		return 1
	} else {
		ret = n * Factorial(n-1)
	}

	if n<=30 {
		fmt.Println(ret)
	}
	return
}

